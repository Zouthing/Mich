Installing Pybombs

Some of the formatting is not compatible with this wiki, this document's master is maintained at: "Celestial Photographer":http://www.celestialphotographer.com/2014/09/17/pybombs-gnuradio/

The general disclaimer...This technique/approach has worked for me various times, it is the method I prefer, it may not work for you. You might prefer other steps. I assume no liability.
HELPFUL/CONSTRUCTIVE criticism is always welcome. Pybombs is not perfect, some recipes do not work.

When you see the word     user     in my instructions, that refers to the user name you're using, ie,
run /home/user/pybombs/src/uhd/host/build/utils/uhd_images_downloader.py
and your user is steve, the line becomes
run /home/steve/pybombs/src/uhd/host/build/utils/uhd_images_downloader.py

For me, I had issues with the following packages:

gr-rds (solution inlcuded)
wireshark connectors (solution included)
gr-ieeee802154 (solution included)
gr-ieee80211 (solution included)
gqrx (solution included)
gr-fosphor (solution included)
Ettus B200/B2100 (solution included)
gr-extras (solution included)
openlte (solution inlcuded)

gr-as – is no longer maintained, last usable version was Gnuradio 3.6, it was replace by Pothos, instructions for Pothos installation are included

pocsag-mpt – is no longer maintained, last usable version was Gnuradio 3.6
gr-smartnet – is no longer maintained, last usable version was Gnuradio 3.6
gr-bluetooth is no longer maintained, last usable version was Gnuradio 3.6

I've included one python script that will allow you to check your install.   It contains only a hackrf (osmosdr) and a FFT display centered around the FM radio band.

I always start with a fresh Ubuntu load, this one is based on Ubuntu 14.04

After install, perform the typical:
<strong>type</strong> sudo apt-get update
<strong>type</strong> sudo apt-get dist-upgrade -y

Pybombs will by default try to install all dependencies, but I have found the install goes much smoother if I install some packages in advance:

<strong>type</strong> sudo apt-get -y install git-core cmake g++ python-dev swig pkg-config libfftw3-dev libcppunit-dev libgsl0-dev libusb-dev libsdl1.2-dev python-wxgtk2.8 python-numpy python-cheetah python-lxml doxygen libxi-dev python-sip libqt4-opengl-dev libqwt-dev libfontconfig1-dev libxrender-dev python-qwt5-qt4 python-sip python-sip-dev cmake xorg-dev libglu1-mesa-dev python-zmq pypy-zmq gedit

reboot Ubuntu

terminal (ctrl+alt+t) into your home directory

<strong>type  </strong> git clone git://github.com/pybombs/pybombs
<strong>type    </strong> cd pybombs
<strong>type  </strong> ./pybombs config

In the configuration setup you can press enter for every option, I changed the install prefix location because this helps prevent errors when I manually install non pybombs packages later on, if you are only going to use pybombs “recipes” leave the default location. If you change to "/usr/local" as I did, you'll have to run "sudo ./pybombs config" after the config files run

<strong>type</strong> sudo ./pybombs config
Output of ./pybombs config

<em>Initializing config file...</em>
<em>Username for GIT access</em>
<em>gituser [user]:</em>
<em>Install Prefix prefix [/home/user/target]:/usr/local/</em>
<em>Order in which to attempt installations when available, options are: src, rpm, deb satisfy_order [deb,src]:</em>
<em>Comma seperated list of package names to assume are already installed forcepkgs []:</em>
<em>Time the monitor thread waits (in seconds) before retrying downloads timeout [30]:</em>
<em>CMAKE_BUILD_TYPE args to pass to cmake projects, options are: Debug, Release, RelWithDebInfo, MinSizeRel, cmakebuildtype [RelWithDebInfo]:</em>
<em>Build doxygen while compiling packages? options are: ON, OFF builddocs [OFF]:</em>
<em>C Compiler Executable [gcc, clang, icc, etc] cc [gcc]:</em>
<em>C++ Compiler Executable [g++, clang++, icpc, etc] cxx [g++]:</em>
<em>Concurrent make threads [1,2,4,8...] makewidth [4]:</em>
<em>done</em>
<em>Settled on prefix: /usr/local</em>

<em>[Errno 13] Permission denied: '/usr/local/lib64'</em>
<em>Error! Configured install prefix requires root privileges. Please re-run as sudo!</em>

<strong>This error is normal if you ran sudo ./pybombs config, rerun the config typing  </strong>       sudo ./pybombs config

Output of ./pybombs config

<em>Settled on prefix: /usr/local</em>
<em>Initializing environmental variables...</em>
<em>/usr/local//python/:/usr/local//lib/python2.6/site-packages/:/usr/local//lib64/python2.6/site-packages/:/usr/local//lib/python2.6/dist-packages/:/usr/local//lib64/python2.6/dist-packages/:/usr/local//lib/python2.7/site-packages/:/usr/local//lib64/python2.7/site-packages/:/usr/local//lib/python2.7/dist-packages/:/usr/local//lib64/python2.7/dist-packages/:/usr/local//python/:/usr/local//lib/python2.6/site-packages/:/usr/local//lib64/python2.6/site-packages/:/usr/local//lib/python2.6/dist-packages/:/usr/local//lib64/python2.6/dist-packages/:/usr/local//lib/python2.7/site-packages/:/usr/local//lib64/python2.7/site-packages/:/usr/local//lib/python2.7/dist-packages/:/usr/local//lib64/python2.7/dist-packages/</em>
<em>no existing inventory found, creating an empty one...</em>
<em>---------- loading recipes -------------------</em>
<em>Loading recipes ...</em>
<em>Loading recipes ... done</em>
<em>---------- loading recipes finished ----------</em>

<em>gituser = user</em>
<em>prefix = /usr/local/</em>
<em>satisfy_order = deb,src</em>
<em>forcepkgs =</em>
<em>timeout = 30</em>
<em>cmakebuildtype = RelWithDebInfo</em>
<em>builddocs = OFF</em>
<em>cc = gcc</em>
<em>cxx = g++</em>
<em>makewidth = 4</em>

From this point forward, you only need "sudo" if you installed into a custom directory instead of the default /home/user/target

<strong>type    </strong> sudo ./pybombs install gnuradio

<strong>THIS WILL TAKE A WHILE</strong>

When it is done <strong>type</strong> sudo ./app_store.py

Click on the packages you want to install, you can only install one at a time. The app_store may go dark. You can monitor the progress in the terminal window that you launched app_store in. If everything installs correctly, the app_store will brighten and your terminal window will display "installation ok via: src" if it errored out, the app_store will close and your terminal window will have some information in <span style="color: #ff0000;">RED</span>.

I suggest starting with gr-osmosdr (&lt;--- this will install many of your app_store blocks such as hackrf and osmosdr) and also the gr-pyqt recipe.

Click the "X" in the upper right hand corner of the app store to exit.
<strong>type    </strong> sudo ./pybombs env

<a href="http://www.celestialphotographer.com/wp-content/uploads/2014/09/setupenv.jpg"><img class="alignnone size-medium wp-image-341" src="http://www.celestialphotographer.com/wp-content/uploads/2014/09/setupenv-300x35.jpg" alt="setupenv" width="300" height="35" /></a>

Take note of the env output, you'll need this information next.

Here you have two options, option 1 is simpler but I have experienced problems with it.

Option 1 doesn't require you to edit your bash file after new recipes are installed. On occasion this has given me problems.

Option 2 is more complex, but I have never had problems. You also have to update your bash file when new recipe path locations have been added/changed.

<strong>Option 1</strong>
cd to your home directory and <strong>type</strong> sudo gedit .bashrc
Scroll to the bottom of your .bashrc file, it will look like this:

<a href="http://www.celestialphotographer.com/wp-content/uploads/2014/09/bash.jpg"><img class="alignnone size-medium wp-image-342" src="http://www.celestialphotographer.com/wp-content/uploads/2014/09/bash-300x87.jpg" alt="bash" width="300" height="87" /></a>
<strong>AFTER</strong> the last <strong>fi</strong> press enter and type or paste the words between<span style="color: #ff0000;">   <strong>run: “</strong></span>    and the last    <span style="color: #ff0000;"><strong>“ </strong> </span>, in this case it is  <strong><span style="color: #ff0000;"> source /usr/local//setup_env.sh</span></strong>
Save the file and exit.
<strong>type</strong> source ~/.bashrc
This should reload your bash file, <strong>type</strong> gnuradio-com and press TAB. If the source file took correctly, Ubuntu should append the gnuradio-com to gnuradio-companion
Press Enter and gnruadio will run.
If not, reboot.
Again, <strong>type</strong> gnuradio-com and press TAB. If the source file took correctly, Ubuntu should append the gnuradio-com to gnuradio-companion
Press Enter and gnruadio will run.

<strong>Option 2</strong>
Using the Ubuntu file manager, navigate to the location listed after typing ./pybombs env. Open setup_env.sh and copy everything below the following line:

<a href="http://www.celestialphotographer.com/wp-content/uploads/2014/09/clipboard.jpg"><img class="alignnone size-medium wp-image-344" src="http://www.celestialphotographer.com/wp-content/uploads/2014/09/clipboard-300x18.jpg" alt="clipboard" width="300" height="18" /></a>

It should look similar to:

<a href="http://www.celestialphotographer.com/wp-content/uploads/2014/09/clipboard-2.jpg"><img class="alignnone size-medium wp-image-343" src="http://www.celestialphotographer.com/wp-content/uploads/2014/09/clipboard-2-300x133.jpg" alt="clipboard 2" width="300" height="133" /></a>

In the termianl window, CD to your home directory
<strong>type    </strong> sudo gedit .bashrc
Scroll to the bottom of your .bashrc file, it will look like this:

<a href="http://www.celestialphotographer.com/wp-content/uploads/2014/09/bash.jpg"><img class="alignnone size-medium wp-image-342" src="http://www.celestialphotographer.com/wp-content/uploads/2014/09/bash-300x87.jpg" alt="bash" width="300" height="87" /></a>
AFTER the last fi press enter and PASTE
Reboot
You should generate the env file and check your .bashrc to see if you need to update the file after installing new recipes

<strong>Updating libhackrf</strong>
cd to your home directory
<strong>type    </strong> git clone https://github.com/mossmann/hackrf.git
<strong>type    </strong> cd hackrf/host/libhackrf/
<strong>type    </strong> mkdir build
<strong>type    </strong> cd build
<strong>type    </strong> cmake ..
<strong>type    </strong> make
<strong>type    </strong> sudo make install
<strong>type    </strong> sudo ldconfig
copy /home/hackrf/host/libhackrf/53-hackrf.rules to /etc/udev/rules.d
<strong>type    </strong> sudo udevadm control --reload-rules
reboot
<strong>type    </strong> hackrf_info

You should see something SIMILAR to:

<em>Found HackRF board.</em>
<em>Board ID Number: 2 (HackRF One)</em>
<em>Firmware Version: git-44df9d1</em>
<em>Part ID Number: 0xa000cb3c 0x004d4f3f</em>
<em>Serial Number: 0x00000000 0x00000000 0x457863c8 0x2f1b511f</em>

<strong>type    </strong> gnuradio-companion to run gnuradio

You should be good to go!

If you need to update the firmware, follow Mike's directions at:
https://github.com/mossmann/hackrf/wiki/Updating-Firmware

<hr />

<strong>Ettus B200</strong>
Go to your home directory
run /home/user/pybombs/src/uhd/host/build/utils/uhd_images_downloader.py
copy the rules from
/usr/local/lib/uhd/utils to /etc/udev/rules.d
<strong>type</strong> sudo udevadm control --reload-rules
reboot

Before running packages you may have to run
uhd_find_devices
or
uhd_usrp_probe

<hr />

<strong>gqrx</strong>
cd to your home directory
Edit the gqrx.lwr file and remove only the BOOST_SUFFIX=-mt from the qmake line
If you've already tried to install, remove by typing sudo ./pybombs clean gqrx
<strong>type</strong> sudo ./app_store
Re-install by clicking gqrx button

<hr />

<strong>gr-rds</strong>
type sudo apt-get install libxml2 cmake libboost-all-dev libcppunit-dev liblog4cpp5-dev swig
cd to you home directory
<strong>type</strong> git clone https://github.com/bastibl/gr-rds
<strong>type</strong> cd gr-rds
<strong>type</strong> mkdir build
<strong>type</strong> cd build
<strong>type</strong> cmake ..
<strong>type</strong> make
<strong>type</strong> sudo make install
<strong>type</strong> sudo ldconfig

<hr />

<strong>Wireshark connectors</strong>
cd to you home directory
<strong>type</strong> git clone https://github.com/bastibl/gr-foo.git
<strong>type</strong> cd gr-foo
<strong>type</strong> mkdir build
<strong>type</strong> cd build
<strong>type</strong> cmake ..
<strong>type</strong> make
<strong>type</strong> sudo make install
<strong>type</strong> sudo ldconfig

<hr />

<strong>gr-ieee802-15-4</strong>
cd to you home directory
<strong>type</strong> git clone git://github.com/bastibl/gr-ieee802-15-4.git
<strong>type</strong> cd gr-ieee802-15-4
<strong>type</strong> mkdir build
<strong>type</strong> cd build
<strong>type</strong> cmake ..
<strong>type</strong> make
<strong>type</strong> sudo make install
<strong>type</strong> sudo ldconfig

The hierarchical block has to be installed separately:
Open examples/ieee802_15_4_PHY.grc in gnuradio-companion and generate the flow graph. This installs the hierarchical block in your home, where gnuradio-companion can find it (typically ~/.grc_gnuradio).

<hr />

<strong>gr-ieee802-11</strong>
<strong>type</strong> sudo apt-get install liblog4cpp5-dev libitpp-dev
cd to you home directory
<strong>type</strong> git clone git://github.com/bastibl/gr-ieee802-11.git
<strong>type</strong> cd gr-ieee802-11
<strong>type</strong> mkdir build
<strong>type</strong> cd build
<strong>type</strong> cmake ..
<strong>type</strong> make
<strong>type</strong> sudo make install
<strong>type</strong> sudo ldconfig

The physical layer is encapsulated in a hierarchical block to allow for a clearer transceiver structure in GNU Radio Companion. This hierarchical block is not included in the installation process. You have to open /examples/wifi_phy_hier.grc with GNU Radio Companion and build it. This will install the block in ~/.grc_gnuradio/.

<hr />

<strong>gr-fosphor</strong>
I only have Nvidia graphics cards, therefore my instructions do not cover Intel or AMD, going to the main site has some instructions
http://sdr.osmocom.org/trac/wiki/fosphor
<strong>type</strong> sudo apt-get install opencl-headers
<strong>type</strong> sudo ./app_store
<strong>type</strong> click fosphor
Then edit:
/usr/local/lib/python2.7/dist-packages/gnuradio/fosphor/__init__.py
below this line:
from fosphor_swig import *
<strong>type</strong> import sys
save the file
because of dependency issues, do these seperately, in this order
<strong>type</strong> sudo apt-get install nvidia-libopencl1-331-updates
<strong>type</strong> sudo apt-get install nvidia-opencl-dev
reboot
<strong>type</strong> sudu apt-get install pyopengl (freeglut3 will be installed too)

If you try to run fosphor and get an error about
glsl 1.5 not supported in Ubuntu, go to the "additional drivers" and load the Nvidia drivers.

<hr />

<strong>gr-openlte</strong>
<strong>type</strong> sudo apt-get install libpolarssl5 libpolarssl-runtime libpolarssl-dev
<strong>type</strong> sudo ./app_store.py
click the gr-openlte icon

<hr />

<strong>Pothos</strong>
<strong>type</strong> sudo apt-get install libnuma-dev cmake g++ libpython-dev python-numpy openjdk-7-jdk qtbase5-dev libqt5svg5-dev
cd into your home directory
<strong>type</strong> git clone https://github.com/pothosware/pothos.git
<strong>type</strong> cd pothos
<strong>type</strong> mkdir build
<strong>type</strong> cd build
<strong>type</strong> cmake ..
<strong>type</strong> make -j4
<strong>type</strong> sudo make install
<strong>type</strong> sudo ldconfig #needed on debian systems
<strong>type</strong> PothosUtil --self-tests
<strong>type</strong> PothosGui

<strong>To integrate Pothos into Gnuradio</strong>
cd into your home directory
<strong>type</strong> sudo apt-get install python-ply python-cheetah
<strong>type</strong> git clone https://github.com/pothosware/gnuradio.git
<strong>type</strong> cd gnuradio
<strong>type</strong> git checkout pothos_support
<strong>type</strong> mkdir build
<strong>type</strong> cd build
<strong>type</strong> cmake ../ -DENABLE_PYTHON=OFF -DCMAKE_INSTALL_PREFIX=/usr/local
<strong>type</strong> make -j8
<strong>type</strong> sudo make install

<hr />

<strong>gr-extras</strong>
cd into your home directory
<strong>type</strong> https://github.com/guruofquality/grextras
<strong>type</strong> mkdir build
<strong>type</strong> cd build
<strong>type</strong> cmake ..
<strong>type</strong> make
<strong>type</strong> sudo make install
<strong>type</strong> sudo ldconfig

<hr />

<strong>A sample GRC written in Python.</strong>

This is to provide you an operational check of your install and your HackRf

When you make a flowgraph in python it saves it in two ways, a .grc and a .py

When you click save, you are saving the GRC. When you click Execute or Generate the flowgraph you are creating the python instructions as well as saving the flowgraph. You can bypass flowgraphs if you understand python. This python script was generated from a flowgraph and the link is only included to help you test your install. It doesn’t do much.

<a title="Test Script" href="http://www.celestialphotographer.com/wp-content/uploads/downloads/2014/09/test.zip">download test.py test script</a>

Unzip the file and save to your home directory.
Open a terminal (ctrl+alt+t) and type python test.py
If everything worked a windows should pop up and you should see something similar to this:

<a href="http://www.celestialphotographer.com/wp-content/uploads/2014/09/fft.jpg"><img class="alignnone size-medium wp-image-340" src="http://www.celestialphotographer.com/wp-content/uploads/2014/09/fft-300x168.jpg" alt="fft" width="300" height="168" /></a>